(function(exports)
{
exports.stat = {
    'demos': {
        'üêº Process fracturing folder on workers':    { type:'Project', url:'modules/jobs/workerBacc0.js' },
        '‚ùÑ Find similar 3d models on worker':        { type:'Project', url:'modules/jobs/workerModel3d.js'},
        '‚Ñô Find prime numbers with C++ on workers':  { type:'Project', url:'modules/jobs/workerPrimeCpp.js'},
        'üíª server cmd':                              { type:'Project', url:'modules/jobs/serverCmd.js'},
        'üìÇ server folder':                           { type:'Project', url:'modules/jobs/serverFolder.js'},
    },
    'lib': {
        //type:'Set<Project>',
        '‚úï': function free(j) {},
        'üñ• Start workers':                       { type:'Project', url:'modules/jobs/overlordWorkers.js'},
        '‚ò† Kill all':                            { type:'Project', url:'modules/jobs/workerKill.js'},
    },
    'tests': {
        //type:'Set<Project>',
        // TODO: lazy(project(...))  : lazy wrapet alle members von project
        'üêº Process fracturing folder on workers':    { type:'Project', url:'modules/jobs/workerBacc0.js'},
        'üêÅ Process empty jobs on worker':            { type:'Project', url:'modules/jobs/workerBacc1.js'},
        'ü¶Å Find similar 3d models on worker':        { type:'Project', url:'modules/jobs/workerModel3d.js'},
        '‚Ñô Find prime numbers with C++ on workers':  { type:'Project', url:'modules/jobs/workerPrimeCpp.js'},
        'üí¢ server fragment folder':                  { type:'Project', url:'modules/jobs/serverFragmentFolder.js'},
        'üíª server cmd':                              { type:'Project', url:'modules/jobs/serverCmd.js'},
        'üìÇ server folder':                           { type:'Project', url:'modules/jobs/serverFolder.js'},
        'üó© server output':                           { type:'Project', url:'modules/jobs/serverOutput.js'},
        'üó© serevr output 2':                         { type:'Project', url:'modules/jobs/serverOutput2.js'},
        '‚ùÑ local find 3d models':                    { type:'Project', url:'modules/jobs/localSetIteration.js'},
        'üîÉ local paralell AJAX':                     { type:'Project', url:'modules/jobs/localAjax.js'},
        'üó© local output':                            { type:'Project', url:'modules/jobs/localOutput.js'},
        '‚úï': function free(j) {},
        '‚ñ∏': function run(j) {
            // this =  tests
            //var projectMembers = this.filter(i=> i.type == 'project')

            var projectMembers = [
                this['üíª server cmd'],
                this['üìÇ server folder'],
                this['üó© server output'],
                this['üîÉ local paralell AJAX'],
                this['üó© local output'],
                this['üêº Process fracturing folder on workers'],
                this['üêÅ Process empty jobs on worker'],
                this['ü¶Å Find similar 3d models on worker'],
                this['‚Ñô Find prime numbers with C++ on workers'],
            ]

            j.updateJob({ state:{}}, projectMembers)

            var pjobs = projectMembers.map(i=> {
                //return ()=> jf.job({ params:i.jobPrototype.args, onCall:i.jobPrototype.src })
                return ()=> jf.job({
                    desc:i.desc,
                    //args:
                    onCall: j=> i['‚ñ∏'](j),
                })
            })
            j.updateJob({ state:{}}, pjobs)
            j.delegate({ type:'sequence', job:pjobs })
            //j.delegateToSequence(projectMembers.map(i=> new Job(i))
        },
    }
}

})
(typeof exports === 'undefined' ? this['projectFolder']={} : exports)
